Annotation(어노테이션 = @)
	사전적 의미 : 주석
		JDK5 등장, 메타데이터라고 불림 (메타데이터 : 데이터를 위한 데이터)
		
	클래스나 메서드, 변수 등을 선언할 때 @붙여서 사용

JPA
	자바에서 관계형 데이터베이스와 상호작용을 위해 기능을 따로 작성하지않고 축소시켜서 사용하는 기술
	장점
		1. 특정 데이터 베이스에 지정되지 않음
			예를 들어 오라클로 데이터베이스를 지정했으나 예외적인 상황으로 MariaDB로 변경한다면
			데이터베이스마다 쿼리문이 다르기때문에 전체 수정을 들어가야함
			하지만 JPA는 추상화한 데이터 접근 계층을 제공 
			(application.properties)설정 파일에다가 어떤 데이터베이스를 사용하는지 알려주면 얼마든지 데이터베이스를 변경할 수 있음
		
		2. 객체지향적 프로그래밍
			JPA 데이터베이스 설계 중심으로 객체지향적으로 설계가 가능
			
		3. 생산성 향상
			데이터베이스 테이블에 새로운 컬럼이 추가되었을 경우에 해당 테이블에 컬럼을 사용하는 DTO 클래스의 필드를 모드 변경해야했음 
			
	단점
		1. 복잡한 쿼리를 처리하는데 어려움이 있음
		
		2. 학습시간 
			세부적으로 미세하게 메모리 시간이 소요됨
		
		 	
	
ORM
	Java와 DataBase에 있는 테이블과 변수들을 매핑해주는 역할을 함 
	
Lombok 라이브러리
	반복적으로 사용하는 Getter/Setter, ToString과 같이 반복적인 자바 코드를 작성할 것을 자동으로 축소해서 생성해주는 역할을 주로하는 라이브러리
	
	@Getter/@Setter : 
		public void getId(){}
		public Int setId(){} 메서드로 작성했던 코드를 @Getter/ @Setter 작성으로 코드를 단축시켜주는 역할을 함
	
	@EqualsAndHashCode : 객체가 동등한지 비교하는데 사용/ 자동으로 equals()와 hashCode()메서드를 생성해줌 
	
	@NotNull : 해당 변수가 null인지 체크해주는 어노테이션을 제공 
	
	@RequiredArgs-Constructor : 필드 중 final이나 @NonNull 로 선언된 필드를 대상으로 생성자를 생성해줌
								이 생성자는 필드를 초기화하는 목적으로 사용됨
	
	@Data : @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgs-Constructor를 합친 어노테이션 
		
	@Entity : 데이터베이스의 테이블에 대응하는 클래스 
			  @Entity가 붙은 클래스는 JPA에서 관리하는 것이고 한글로 엔티티라고 부름
			  데이터베이스에 item테이블을 만들고, 이에 대응하는 Item.java 만들어서 
			  @Entity 어노테이션을 붙이면 어노테이션이 붙은 클래스가 엔티티가 되는 것
			  			 			 
 @Table : 테이블 이름을 지정
 @Id : 해당 필드가 엔터티의 primaryKey임을 나타냄 
 @Column : 해당 필드가 데이터베이스 테이블의 컬럼에 매핑되는 것을 확인할 수 있음
 	nullable : 해당 컬럼이 null 값을 허용하는 지 여부를 나타냄
 	length : 문자열 컬럼의 최대 길이를 지정
 	String으로 시작되는 필드값의 경우 String으로 지정된 이름으로 명시되기 때문에 따로 name을 지정해주지 않아도되지만 \
 	String 이외 값은 name을 설정해주어 Column명을 지정해주는것이 원칙
 
 	
 GeneratedValue JPA에서 엔터티의 기본 키 값을 자동으로 생성하는 방법을 지정하는데 사용하는 어노테이션	
 시퀀스를 사용해서 기본키 값을 생성할 수 있도록 지원
 시퀀스를 데이터베이스에서 중복되는 값이 아닌 각 레코드가 고유한 숫자번호를 가질 수 있도록 자동으로 값을 생성
 @SequenceGenerator = GeneratedValue와 연결할 이름을 설정해주고 시퀀스의 이름과 크기를 지정할 수 있음
 @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "product_sequence")
 @SequenceGenerator(name = "product_sequence",sequenceName = "PRODUCT_SEQ", allocationSize =1)
 	데이터베이스 자체에서 자동으로 값이 증가할 수 있도록 자동생성이 들어있는 경우 
 	아래 어노테이션 방식을 사용
 	새로운 레코드가 삽입될 때마다 데이터베이스가 자동으로 기본키의 값을 증가시킴
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 
 
 Lombok
 	@Builder : 객체를 생성할 때 매개변수의 순서나 개수에 관계없이
 				보기 편할 수 있도록 객체를 생성할 수 있게 도와주는 메서드
 				
 	@AllArgsConstructor : 모든 필드에 생성자를  생성해줌
 						 객체를 생성할 때 모든 필드를 포함하는 생성자를 쉽게 만들 수 있음
 						 예제코드)
 						 @AllArgsConstructor
 						 public class Student{
 						 	private String name; // new Student("학생명",3);
 						 	private int grade;
 						 }
 	@NoArgsConstructor : 매개변수가 없는 기본 생성자를 생성해줌
 						예제코드)
 						@NoArgsConstructor
 						public class School{
 												//new School()
 						}
 	@RequiredArgsConstructor : 이 어노테이션이 적용된 클래스는
 							 필수로 해야하는 final 필드나 @NotNull로 표시된 필드를 사용하는 생성자를 자동으로 생성
 							 예제)
 							 @RequiredArgsConstructor
 							 public class Student{
 							 	private final String name;
 							 	private final int grade;
 							 	private String address;
 							 }
 							 name과 grade는 생성자에 포함되지만 address는 생성자에 포함되지않음
 							 나중에 student 객체를 다른데서 불러올 때 Student st  = new Student("이름",5);
 							 address는 넣어주지 않음
 							
 
 JPA 어노테이션
 	@Prepersist : 엔터티가 데이터베이스에 저장되기 전에 호출되는 메서드를 지정
 				 엔터티에 필요한 사전 처리작업을 수행하는데 많이 사용
 				 
 				 예제코드 :
 				 @Entity
 				 public class TestEntity{
 				 	@Id
 				 	private Long id;
 				 	private String name;
 				 	@DateTimeFormat(patter="yyyy-mm-dd")
 				 	private Date createDate; //now라는 메서드를 활용해서 현재 시간을 넣음
 				 	@PrePersists
 				 	private void preWork(){
 				 		//저장 전 수행할 작업을 작성
 				 		//생성일자 설정, 특정 필드 초기화
 				 	}
 				 	@PrePersists
 				 	private void preWork(){
 				 		this.createDate = LocalDate.now();
 				 		
 				 	}
 				 	
 				 }